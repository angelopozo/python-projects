# üß≠ Estructuras de Control en Python

## üéØ Objetivos
- Dominar las **instrucciones condicionales** y comprender que Python basa su sintaxis en la **sangr√≠a**, no en llaves ni par√©ntesis.  
- Repetir tareas con **bucles `for` y `while`**, incluyendo t√©cnicas de iteraci√≥n como `range()`, `enumerate()` y `zip()`, y comprender c√≥mo **interrumpir o continuar** la ejecuci√≥n.  
- Gestionar el flujo de ejecuci√≥n cuando ocurren errores mediante **bloques `try/except/else/finally`** y aprender a lanzar excepciones propias.  
- Conocer nuevas construcciones de control como la **expresi√≥n condicional en l√≠nea** y la sentencia **`match`** introducida en Python 3.10.  

---

## 1. Condicionales

Las **sentencias condicionales** permiten ejecutar bloques de c√≥digo solo si se cumple una condici√≥n.  
En Python **no se usan par√©ntesis ni llaves** como en otros lenguajes; la sintaxis se basa en palabras clave y **sangr√≠a obligatoria**.

- `if` ‚Üí Eval√∫a una condici√≥n y ejecuta el bloque si es verdadera.  
- `elif` (else if) ‚Üí Comprueba condiciones adicionales si la anterior no se cumpli√≥.  
- `else` ‚Üí Se ejecuta cuando ninguna condici√≥n anterior fue verdadera.  
- `:` ‚Üí Indica el inicio del bloque de c√≥digo dependiente.  
- **Indentaci√≥n** ‚Üí Fundamental en Python, define el alcance de cada bloque.

### Ejemplo
```python
edad = 18

if edad < 12:
    print("Eres un ni√±o")
elif edad < 18:
    print("Eres adolescente")
elif edad < 65:
    print("Eres adulto")
else:
    print("Eres mayor")
```

### Expresi√≥n condicional (operador ternario)
Permite escribir condiciones simples en una sola l√≠nea:

```python
mensaje = "par" if numero % 2 == 0 else "impar"
```

Equivale a `condici√≥n ? valor_si_verdadero : valor_si_falso` en otros lenguajes.

### Sentencia `match` (Python 3.10+)
Permite comparar un valor contra varios **patrones**, similar a `switch` pero m√°s potente.

```python
def http_error(status):
    match status:
        case 400:
            return "Petici√≥n incorrecta"
        case 404:
            return "No encontrado"
        case 418:
            return "Soy una tetera"
        case _:
            return "Error desconocido"
```

- `_` act√∫a como comod√≠n.  
- Soporta desempaquetado de tuplas y objetos.

---

## 2. Bucles

### üîÑ Bucle `for`
En Python, `for` **itera sobre elementos** de una secuencia (listas, tuplas, cadenas, diccionarios, etc.) sin necesidad de √≠ndices manuales.

- `range(fin)` ‚Üí N√∫meros de `0` a `fin-1`.  
- `range(inicio, fin, paso)` ‚Üí Controla inicio y salto.  
- `enumerate()` ‚Üí Devuelve √≠ndice y valor en cada iteraci√≥n.  
- `zip()` ‚Üí Itera varias colecciones a la vez.

#### Ejemplos
```python
# Iterar una lista
nombres = ["Ana", "Luis", "Sof√≠a"]
for nombre in nombres:
    print(nombre.upper())

# Con range
for i in range(5):      
    print(i)

# Con inicio y paso
for i in range(1, 10, 2):  
    print(i)

# enumerate
for indice, valor in enumerate([10, 20, 30]):
    print(f"√çndice {indice}: {valor}")

# zip
nombres = ["Ana", "Luis", "Sof√≠a"]
edades  = [20, 22, 19]
for nombre, edad in zip(nombres, edades):
    print(f"{nombre} tiene {edad} a√±os")
```

### ‚ö° Control de bucles
- `break` ‚Üí Sale inmediatamente del bucle actual.  
- `continue` ‚Üí Salta a la siguiente iteraci√≥n.  
- `else` ‚Üí Se ejecuta si el bucle termina sin `break`.  
- `pass` ‚Üí No hace nada, √∫til como marcador de c√≥digo pendiente.

```python
# Buscar n√∫mero primo con for-else
for n in range(2, 10):
    for x in range(2, n):
        if n % x == 0:
            print(f"{n} es igual a {x} √ó {n//x}")
            break
    else:
        print(f"{n} es un n√∫mero primo")

# Uso de continue
for num in range(2, 10):
    if num % 2 == 0:
        print(f"Encontrado par {num}")
        continue
    print(f"Encontrado impar {num}")
```

### üîÅ Bucle `while`
Repite su cuerpo mientras la condici√≥n sea verdadera.

```python
x = 5
while x > 0:
    print(x)
    x -= 1
else:
    print("¬°Despegue!")
```

- √ötil para procesos de duraci√≥n indeterminada.
- Tambi√©n admite `else`, `break`, `continue` y `pass`.

---

## 3. Manejo de errores

En Python, los **errores de sintaxis** detienen el programa antes de ejecutarse, mientras que las **excepciones** ocurren durante la ejecuci√≥n y pueden ser capturadas.

### Bloques `try/except`
Permiten manejar errores espec√≠ficos y evitar que el programa se detenga.

```python
try:
    num = int(input("Introduce un n√∫mero: "))
    resultado = 10 / num
except ZeroDivisionError:
    print("No puedes dividir entre 0")
except ValueError:
    print("Debes introducir un n√∫mero v√°lido")
except (TypeError, NameError):
    print("Otro tipo de error")
else:
    print(f"El resultado es {resultado}")  # solo si no hubo excepci√≥n
finally:
    print("Ejecuci√≥n finalizada")  # siempre se ejecuta
```

- `try` ‚Üí Bloque que puede fallar.  
- `except` ‚Üí Captura errores espec√≠ficos.  
- `else` ‚Üí Se ejecuta solo si no hubo excepci√≥n.  
- `finally` ‚Üí Siempre se ejecuta (para limpieza de recursos, mensajes finales, etc.).

---

‚úÖ **En resumen:**  
Con las **estructuras de control**, puedes dirigir el flujo de tu programa, repetir tareas y manejar errores de forma segura y clara.  
Dominar `if/elif/else`, `for`, `while` y el manejo de excepciones har√° tu c√≥digo m√°s robusto y legible.

---